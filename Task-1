import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# File paths
train_file_path = "./internship/train.csv"
test_file_path = "./internship/test.csv"

# Load the dataset
train_data = pd.read_csv("/content/train.csv")
test_data = pd.read_csv("/content/test.csv")

# Display the first few rows of the training dataset
print("Training Dataset loaded successfully.")
print(train_data.head())

# Calculate total area, bedrooms, and bathrooms from training data
total_area = train_data['GrLivArea'].sum()
total_bedrooms = train_data['BedroomAbvGr'].sum()
total_bathrooms = train_data['FullBath'].sum()

print(f"Total Area (Training Data): {total_area} square feet")
print(f"Total Number of Bedrooms (Training Data): {total_bedrooms}")
print(f"Total Number of Bathrooms (Training Data): {total_bathrooms}")

# Select relevant features for prediction
features = ['GrLivArea', 'BedroomAbvGr', 'FullBath']
target = 'SalePrice'

# Handle missing values (if any)
train_data = train_data[features + [target]].dropna()

# Define input features (X) and target variable (y)
X = train_data[features]
y = train_data[target]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Visualize Actual vs Predicted prices
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linewidth=2)
plt.xlabel("Actual Sale Price")
plt.ylabel("Predicted Sale Price")
plt.title("Actual vs Predicted Sale Price")
plt.show()

# Load test data for predictions (if needed)
test_data = test_data[features].dropna()
test_predictions = model.predict(test_data)

print("Test Data Predictions:")
print(test_predictions)
